function tests = test_mtx_to_mesh

tests = functiontests(localfunctions);

end


function test_1d(testCase)
% Test function for 1D vector (return val should be same as input)

mtx = [1; 2; 3; 4];
mesh = {[1; 2; 3; 4]};

result = mtx_to_mesh(mtx, size(mtx));
verifyEqual(testCase, result, mesh);

end


function test_2d(testCase)
% Test function for 2D matrix

mtx = [ ...
    [0, 0]; ...
    [0, 1]; ...
    [1, 0]; ...
    [1, 1]; ...
];
mesh{1} = [ ...
    [0, 1]; ...
    [0, 1]; ...
];
mesh{2} = [ ...
    [0, 0]; ...
    [1, 1]; ...
];

result = mtx_to_mesh(mtx, [2, 2]);
verifyEqual(testCase, result, mesh);

end


function test_3d(testCase)
% Test function for 3D matrix

mtx = [ ...
    [0, 0, 0]; ...
    [0, 0, 1]; ...
    [0, 1, 0]; ...
    [0, 1, 1]; ...
    [1, 0, 0]; ...
    [1, 0, 1]; ...
    [1, 1, 0]; ...
    [1, 1, 1]; ...
];

mesh{1}(:, :, 1) = [ ...
    [0, 0]; ...
    [0, 0]; ...
];
mesh{1}(:, :, 2) = [ ...
    [1, 1]; ...
    [1, 1]; ...
];
mesh{2}(:, :, 1) = [ ...
    [0, 1]; ...
    [0, 1]; ...
];
mesh{2}(:, :, 2) = [ ...
    [0, 1]; ...
    [0, 1]; ...
];
mesh{3}(:, :, 1) = [ ...
    [0, 0]; ...
    [1, 1]; ...
];
mesh{3}(:, :, 2) = [ ...
    [0, 0]; ...
    [1, 1]; ...
];

result = mtx_to_mesh(mtx, [2, 2, 2]);
verifyEqual(testCase, result, mesh);

end


function test_bad_dims(testCase)
% Test that function throws error if dimensions don't match matrix

mtx = [1; 2; 3; 4];
dims = [2, 3];

verifyError( ...
    testCase, ...
    @() mtx_to_mesh(mtx, dims), ...
    'mtx_to_mesh:incorrect_dims' ...
);

end
